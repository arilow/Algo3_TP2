@startuml algoThief

together {
    class Nivel {
        - ciudadActual: Ciudad
        + jugar(comunicador: ComunicadoEstadoPartida)
        + visitarCiudad(ciudad: Ciudad)
        + obetenerCiudadActual(): Ciudad
        + entrarAEdificio(edificio: int)
        + ladronArrestado(): bool
        + tieneTesoro(tesoro: string): bool
        + buscarLadrones(datosLadron: DatosLadron)
        + obtenerListaSospechosos(): Ladron[]
        + omitirOrdenDeArresto(nombreLadron: string)
        + obtenerLadron(): Ladron
        + listaEdificios(): String[]
        + obtenerFecha(): String
        + arribarACiudadActual()
        + obtenerEdificioActual(): Edificio
        + obtenerJugadorActual(): Jugador
        + nombreTesoro(): String
        + obtenerCiudad(ciudad: string): Ciudad
    }

    class CreadorDeNiveles {
        - max: int
        - min: int
        + crearNivel()
        + cargarCiudadesNivel()
        + cargarArchivo()
        + cargarLadron()
        + cargarObjetoRobado()
    }
}

together {
    class Jugador {
        - cantidadArrestos: int
        - fueAcuchillado: bool
        - nombre: string
        + asignarCargo(cargo: Cargo)
        + recibirHeridaCuchillo(tiempo: Tiempo)
        + dormir(tiempo: Tiempo)
        + recibirHeridaArmaFuego(tiempo: Tiempo)
        + viajar(distancia: double, tiempo: Tiempo)
        + agregarArresto()
        + setCantidadArrestos(cantidadArrestos: int)
        + getCantidadArrestos(): int
        + getCargo(): Cargo
        + obtenerCargo(): string
    }

    class OrdenDeArresto{
    - nombreLadronDeOrden: String
    }
}

class Ladron {
    - ciudadActual: string
    - edificioActual: int
    - nombreLadron: string
    - esLibre: bool
    + obtenerNombre(): string
    + toString(): string
    + constatarDatos(datos: DatosLadron): bool
    + estaEn(ciudad: string, edificio: int): bool
    + arrestar()
    + estaLibre(): bool
}
class Interpol {
    - ladronBuscado: String
    - listaLadrones: List<Ladron>
    + buscarLadrones()
}


class Tiempo {
    - horas: int
    - horasFin: int
    - dia: int
    - diaFin: int
}

class Ladron{}
class DatosLadron{
    - sexo: string
    - hobby: string
    - cabello: string
    - senia: string
    - vehiculo: string
    + constatar(otro: DatosLadron): bool
    + toString(): string
}

interface ObjetoRobado{
    + es(nombre: string)
    + obtenerCantidadCiudadesEscape(): int
}
class Comun{
    - nombre: string
    - cantidadCiudadesEscape: int
}
class Valioso{
    - nombre: string
    - cantidadCiudadesEscape: int
}
class MuyValioso{
    - nombre: string
    - cantidadCiudadesEscape: int
}

class Tiempo {
    - horas
    - horasFin
    sumarHoras()
}

Ladron --> DatosLadron

ObjetoRobado <|.. Comun
ObjetoRobado <|.. Valioso
ObjetoRobado <|.. MuyValioso



Nivel --> Ladron
Nivel --> Interpol
Nivel --> OrdenDeArresto

Nivel ..> Tiempo
Nivel --> ObjetoRobado


CreadorDeNiveles .left> Nivel
Jugador <.up. Nivel



@enduml